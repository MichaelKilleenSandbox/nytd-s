
create table COMPLIANCECATEGORY
(
	COMPLIANCECATEGORYID NUMBER not null
		constraint PK_COMPLIANCECATEGORY
			primary key
		constraint NN_COMPLIANCECATEGORYID
			check ("COMPLIANCECATEGORYID" IS NOT NULL),
	NAME VARCHAR(255),
	SUPERCATEGORYID NUMBER
		constraint FK_COMPLIANCECAT_COMPLSUPERCAT
			references COMPLIANCESUPERCATEGORY,
	STANDARDPENALTYVALUE VARCHAR(255),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	PENALTYLETTERDESC VARCHAR(255),
	PENALTYLETTERDESC2 VARCHAR(255)
)

create table COMPLIANCESUPERCATEGORY
(
    COMPLIANCESUPERCATEGORYID NUMBER not null
        constraint PK_COMPLIANCESUPERCATEGORY
            primary key
        constraint NN_COMPLIANCESUPERCATEGORYID
            check ("COMPLIANCESUPERCATEGORYID" IS NOT NULL),
    NAME VARCHAR(255),
    CREATEDDATE DATE,
    CREATEDBY VARCHAR(255),
    UPDATEDATE DATE,
    UPDATEBY VARCHAR(255),
    DESCRIPTION VARCHAR(1000)
)

create table ELEMENT
(
	ELEMENTID NUMBER not null
		constraint PK_ELEMENT
			primary key
		constraint NN_ELEMENTID
			check ("ELEMENTID" IS NOT NULL),
	NAME VARCHAR(50),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	NODENAME VARCHAR(255),
	VARIABLENAME VARCHAR(255),
	SORT NUMBER
)
/

create table COMPLIANCESTANDARD
(
	COMPLIANCESTANDARDID NUMBER not null
		constraint PK_COMPLIANCESTANDARD
			primary key
		constraint NN_COMPLIANCESTANDARDID
			check ("COMPLIANCESTANDARDID" IS NOT NULL),
	COMPLIANCESTANDARD NUMBER,
	ELEMENTID NUMBER
		constraint ELEMENT_COMPLIANCESTANDARD
			references ELEMENT,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	PENALTYLETTERDESC VARCHAR(255)
)
/

create table POPULATION
(
	POPULATIONID NUMBER not null
		constraint PK_POPULATION
			primary key
		constraint NN_POPULATIONID
			check ("POPULATIONID" IS NOT NULL),
	NAME VARCHAR(50),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	POPULATIONTYPE VARCHAR(50)
)
/

create table ALLOWEDVALUE
(
	ALLOWEDVALUEID NUMBER not null
		constraint PK_ALLOWEDVALUE
			primary key
		constraint NN_ALLOWEDVALUEID
			check ("ALLOWEDVALUEID" IS NOT NULL),
	NAME VARCHAR(50),
	VALUE VARCHAR(255),
	ELEMENTID NUMBER
		constraint ELEMENT_ALLOWEDVALUE
			references ELEMENT,
	POPULATIONID NUMBER
		constraint POPULATION_ALLOWEDVALUE
			references POPULATION,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	SORTORDER NUMBER(3),
	FEDERALVALUE VARCHAR(255)
)
/

create index IDX_ALLOWEDVALUE_ELEMENTID
	on ALLOWEDVALUE (ELEMENTID, VALUE)
/

create table DATAQUALITYADVSTANDARD
(
	DATAQUALITYADVSTANDARDID NUMBER not null
		constraint PK_DATEQUALITYADVSTANDARD
			primary key
		constraint NN_DATAQUALITYADVSTANDARDID
			check ("DATAQUALITYADVSTANDARDID" IS NOT NULL),
	NAME VARCHAR(50),
	DATAQUALITYADVSTANDARD NUMBER,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	ALLOWEDVALUEID NUMBER
		constraint ALLOWEDVAL_DATAQUALITYADVSTAND
			references ALLOWEDVALUE
)
/

create index IDX_DATAQUALADV_ALLOWEDVALUEID
	on DATAQUALITYADVSTANDARD (ALLOWEDVALUEID)
/

create index IDX_DATAQUALADV_STANDARD
	on DATAQUALITYADVSTANDARD (DATAQUALITYADVSTANDARD)
/

create table PRIMARYUSERROLE
(
	PRIMARYUSERROLEID NUMBER not null
		constraint PK_PRIMARYUSERROLE
			primary key
		constraint NN_PRIMARYUSERROLEID
			check ("PRIMARYUSERROLEID" IS NOT NULL),
	NAME VARCHAR(255),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table PRIVILEGE
(
	PRIVILEGEID NUMBER not null
		constraint PK_PRIVILEGE
			primary key
		constraint NN_PRIVILEGEID
			check ("PRIVILEGEID" IS NOT NULL),
	PRIVILEGETYPE NVARCHAR(255),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table PROBLEMDESCRIPTION
(
	PROBLEMDESCRIPTIONID NUMBER not null
		constraint PK_PROBLEMDESCRIPTION
			primary key
		constraint NN_PROBLEMDESCRIPTIONID
			check ("PROBLEMDESCRIPTIONID" IS NOT NULL),
	NAME VARCHAR(1000),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	COMPLIANCECATEGORYID NUMBER
		constraint COMPLCAT_PROBLEMDESCRIPTION
			references COMPLIANCECATEGORY,
	RULENAME VARCHAR(255)
)
/

create table REGION
(
	REGIONID NUMBER not null
		constraint PK_REGION
			primary key
		constraint NN_REGIONID
			check ("REGIONID" IS NOT NULL),
	REGION VARCHAR(30),
	REGIONCODE VARCHAR(4),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table REPORTINGPERIOD
(
	REPORTINGPERIODID NUMBER not null
		constraint PK_REPORTINGPERIOD
			primary key
		constraint NN_REPORTINGPERIODID
			check ("REPORTINGPERIODID" IS NOT NULL),
	NAME VARCHAR(255),
	STARTREPORTINGDATE DATE,
	ENDREPORTINGDATE DATE,
	OUTCOMEAGE VARCHAR(2),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table SECONDARYUSERROLE
(
	SECONDARYUSERROLEID NUMBER not null
		constraint PK_SECONDARYUSERROLE
			primary key
		constraint NN_SECONDARYUSERROLEID
			check ("SECONDARYUSERROLEID" IS NOT NULL),
	NAME VARCHAR(255),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table DERIVEDROLE
(
	DERIVEDROLEID NUMBER not null
		constraint PK_DERIVEDROLE
			primary key
		constraint NN_DERIVEDROLEID
			check ("DERIVEDROLEID" IS NOT NULL),
	NAME VARCHAR(255),
	PRIMARYUSERROLEID NUMBER
		constraint PRIMARYUSERROLE_DERIVEDROLE
			references PRIMARYUSERROLE,
	SECONDARYUSERROLEID NUMBER
		constraint SECONDARYUSERROLE_DERIVEDROLE
			references SECONDARYUSERROLE,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table STATE
(
	STATEID NUMBER not null
		constraint PK_STATE
			primary key
		constraint NN_STATEID
			check ("STATEID" IS NOT NULL),
	STATENAME VARCHAR(30),
	ABBREVIATION VARCHAR(4),
	FIPSCODE VARCHAR(20),
	REGIONID NUMBER
		constraint REGION_STATE
			references REGION,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create index IDX_STATE_REGIONID
	on STATE (REGIONID)
/

create table TRANSMISSIONTYPE
(
	TRANSMISSIONTYPEID NUMBER not null
		constraint PK_TRANSMISSIONTYPE
			primary key
		constraint NN_TRANSMISSIONTYPEID
			check ("TRANSMISSIONTYPEID" IS NOT NULL),
	NAME VARCHAR(255),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table DUEDATE
(
	DUEDATEID NUMBER not null
		constraint PK_DUEDATE
			primary key
		constraint NN_DUEDATEID
			check ("DUEDATEID" IS NOT NULL),
	NAME VARCHAR(255),
	SUBMISSIONDATE DATE,
	TRANSMISSIONTYPEID NUMBER
		constraint TRANSMISSIONTYPE_DUEDATE
			references TRANSMISSIONTYPE,
	REPORTINGPERIODID NUMBER
		constraint REPORTINGPERIOD_DUEDATE
			references REPORTINGPERIOD,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	ADJUSTEDDUEDATE DATE
)
/

create table SITEUSER
(
	SITEUSERID NUMBER not null
		constraint PK_SITEUSER
			primary key
		constraint NN_SITEUSERID
			check ("SITEUSERID" IS NOT NULL),
	USERNAME VARCHAR(255),
	PASSWORD VARCHAR(96),
	FIRSTNAME VARCHAR(40),
	LASTNAME VARCHAR(40),
	EMAILADDRESS VARCHAR(255),
	PHONENUMBER VARCHAR(20),
	PRIMARYUSERROLEID NUMBER
		constraint FK_SITEUSER_PRIMARYUSERROLE
			references PRIMARYUSERROLE,
	EMAILNOTIFICATION CHAR,
	LOCKED NUMBER(1),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	TIMELOCKED TIMESTAMP(6),
	PWCHANGEKEY VARCHAR(14),
	REGIONID NUMBER
		constraint REGION_SITEUSER
			references REGION,
	STATEID NUMBER
		constraint STATE_SITEUSER
			references STATE,
	ISDELETED CHAR,
	PWCHANGEDDATE DATE default sysdate,
	PWTEMPORARY CHAR default 'F'
)
/

create table LOOKUP
(
	LOOKUPID NUMBER not null
		constraint PK_LOOKUP
			primary key
		constraint NN_LOOKUPID
			check ("LOOKUPID" IS NOT NULL),
	CATEGORY VARCHAR(255),
	CODEVALUE NUMBER(2),
	CODEDESCRIPTION VARCHAR(255),
	SORTORDER NUMBER(3),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table SITEUSERSECONDARYROLE
(
	SITEUSERSECONDARYROLEID NUMBER not null
		constraint PK_SITEUSERSECONDARYROLE
			primary key
		constraint NN_SITEUSERSECONDARYROLEID
			check ("SITEUSERSECONDARYROLEID" IS NOT NULL),
	SITEUSERID NUMBER
		constraint SITEUSER_SITEUSERSECONDARYROLE
			references SITEUSER,
	SECONDARYUSERROLEID NUMBER
		constraint USER2NDROLESECONDARYUSERROLE
			references SECONDARYUSERROLE,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table PRIVLEGEDERIVEDROLE
(
	PRIVLEGEDERIVEDROLEID NUMBER not null
		constraint PK_PRIVLEGEDERIVEDROLE
			primary key
		constraint NN_PRIVLEGEDERIVEDROLEID
			check ("PRIVLEGEDERIVEDROLEID" IS NOT NULL),
	DERIVEDROLEID NUMBER
		constraint DERIVEDROLEID_PRIVDERIROLEID
			references DERIVEDROLE,
	PRIVILEGEID NUMBER
		constraint PRIVILEGE_PRIVLEGEDERIVEDROLE
			references PRIVILEGE,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table ELEMENTPOPULATION
(
	ELEMENTPOPULATIONID NUMBER not null
		constraint PK_ELEMENTPOPULATION
			primary key
		constraint NN_ELEMENTPOPULATIONID
			check ("ELEMENTPOPULATIONID" IS NOT NULL),
	POPULATIONID NUMBER
		constraint POPULATION_ELEMENTPOPULATION
			references POPULATION,
	ELEMENTID NUMBER
		constraint ELEMENT_ELEMENTPOPULATION
			references ELEMENT,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table AUTHLOG
(
	AUTHLOGID NUMBER not null
		constraint PK_AUTHLOG
			primary key
		constraint NN_AUTHLOGID
			check ("AUTHLOGID" IS NOT NULL),
	USERNAME VARCHAR(96),
	ATTEMPTTIME TIMESTAMP(6),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table FAKEUSER
(
	FAKEUSERID NUMBER not null
		constraint PK_FAKEUSER
			primary key
		constraint NN_FAKEUSERID
			check ("FAKEUSERID" IS NOT NULL),
	USERNAME VARCHAR(255),
	LOCKED NUMBER(1) default 0 not null
		constraint NN_LOCKED
			check ("LOCKED" IS NOT NULL),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	TIMELOCKED TIMESTAMP(6)
)
/

create table ALLOWEDVALUEINCONSISTENCY
(
	ALLOWEDVALUEINCONSISTENCYID NUMBER not null
		constraint PK_ALLOWEDVALUEINCONSISTENCY
			primary key
		constraint NN_ALLOWEDVALUEINCONSISTENCYID
			check ("ALLOWEDVALUEINCONSISTENCYID" IS NOT NULL),
	ALLOWEDVALUEID NUMBER
		constraint ALLOWEDVALUE_ALLOVALUEINCONS
			references ALLOWEDVALUE,
	PROBLEMDESCRIPTIONID NUMBER
		constraint PROBLEMDESC_ALLVALUEINCONSENCY
			references PROBLEMDESCRIPTION,
	ISTRUE VARCHAR(1),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table CROSSREFINCONSISTENCY
(
	CROSSREFINCONSISTENCYID NUMBER not null
		constraint PK_CROSSREFINCONSISTENCY
			primary key
		constraint NN_CROSSREFINCONSISTENCYID
			check ("CROSSREFINCONSISTENCYID" IS NOT NULL),
	ALLOWEDVALUEID NUMBER
		constraint ALLOWEDVALUE_CROSSREFINCONS
			references ALLOWEDVALUE,
	ALLOWEDVALUEINCONSISTENCYID NUMBER
		constraint CROSSREFINCONS_ALLVALINC
			references ALLOWEDVALUEINCONSISTENCY,
	ISTRUE VARCHAR(1),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table AGGCOMPLIANCESTANDARD
(
	AGGCOMPLIANCESTANDARDID NUMBER not null
		constraint PK_AGGCOMPLIANCESTANDARD
			primary key
		constraint NN_AGGCOMPLIANCESTANDARDID
			check ("AGGCOMPLIANCESTANDARDID" IS NOT NULL),
	AGGCOMPLIANCESTANDARD NUMBER,
	ELEMENTID NUMBER
		constraint ELEMENT_AGGCOMPSTANDAR
			references ELEMENT,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	KEYVALUE VARCHAR(50),
	ALLOWEDVALUEID NUMBER
		constraint ALLOWEDVALUE_AGGCOMPSTAND
			references ALLOWEDVALUE,
	PROBLEMDESCRIPTIONID NUMBER
		constraint PROBLEMDESC_AGGCOMPSTANDARD
			references PROBLEMDESCRIPTION
)
/

create table OUTCOMEPOPULATION
(
	POPULATIONID NUMBER not null
		constraint PK_OUTCOMEPOPULATION
			primary key
		constraint POPULATION_OUTCOMEPOPULATION
			references POPULATION
		constraint NN_POPULATIONID1
			check ("POPULATIONID" IS NOT NULL),
	NAME VARCHAR(50),
	CREATEDDATE DATE default sysdate,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table SERVEDPOPULATION
(
	POPULATIONID NUMBER not null
		constraint PK_SERVEDPOPULATION
			primary key
		constraint POPULATION_SERVEDPOPULATION
			references POPULATION
		constraint NN_POPULATIONID2
			check ("POPULATIONID" IS NOT NULL),
	NAME VARCHAR(50),
	CREATEDDATE DATE default sysdate,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table SYSTEMGENERATEDMESSAGE
(
	SYSTEMGENERATEDMESSAGEID NUMBER not null
		constraint PK_SYSTEMGENERATEDMESSAGE
			primary key
		constraint NN_SYSTEMGENERATEDMESSAGEID
			check ("SYSTEMGENERATEDMESSAGEID" IS NOT NULL),
	SYSTEMMESSAGEBODY VARCHAR(2000),
	SUBJECT VARCHAR(255),
	DURATION NUMBER,
	CREATEDDATE DATE default sysdate,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table ELEMENTNOTE
(
	ELEMENTNOTEID NUMBER not null
		constraint PK_ELEMENTNOTE
			primary key
		constraint NN_ELEMENTNOTEID
			check ("ELEMENTNOTEID" IS NOT NULL),
	NOTE VARCHAR(1000),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	ELEMENTID NUMBER
		constraint ELEMENTNOTE_ELEMENT
			references ELEMENT
				on delete cascade,
	TRANSMISSIONID NUMBER
)
/

create table EXPORTMETADATA
(
	EXPORTMETADATAID NUMBER not null
		constraint PK_EXPORTMETADATA
			primary key,
	FILENAME VARCHAR(255),
	FILETYPE VARCHAR(255),
	REPORTINGPERIODS VARCHAR(2000),
	STATES VARCHAR(2000),
	POPULATIONS VARCHAR(2000),
	DEMOGRAPHICS VARCHAR(2000),
	CHARACTERISTICS VARCHAR(2000),
	INDEPENDENTLIVINGSERVICES VARCHAR(2000),
	YOUTHOUTCOMESURVEYS VARCHAR(2000),
	DEMOGRAPHICNOTES VARCHAR(2000),
	CHARACTERISTICNOTES VARCHAR(2000),
	INDEPENDENTLIVINGSERVICENOTES VARCHAR(2000),
	YOUTHOUTCOMESURVEYNOTES VARCHAR(2000),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	TRANSMISSIONIDS VARCHAR(4000),
	USERNAME VARCHAR(255)
)
/

create table ACROSSREPORTPERIODADVISORY_RPT
(
	RECORDNUMBER VARCHAR(255),
	REPORTPERIOD VARCHAR(255),
	TRANSMISSIONID VARCHAR(255),
	ELEMENTNUMBER VARCHAR(255),
	ELEMENTDESCRIPTION VARCHAR(255),
	PROBLEMDESCRIPTION VARCHAR(1000),
	SELECTEDVALUE VARCHAR(255),
	TARGETVALUE VARCHAR(255),
	SELECTEDTRANSMISSIONID NUMBER,
	PROBLEMDESCRIPTIONID NUMBER
)
/

create table SELECTEDRECORDSTOCOMPARE
(
	TRANSMISSIONID NUMBER not null,
	TRANSMISSIONRECORDID NUMBER not null,
	STATE VARCHAR(30),
	REPORTINGPERIODID NUMBER,
	REPORTINGPERIOD VARCHAR(255),
	STATEID NUMBER,
	FEDERALFILEID VARCHAR(552),
	E3_RECORD_NUMBER VARCHAR(255),
	SERVEDPOPULATION VARCHAR(30),
	OUTCOMEPOPULATION VARCHAR(30),
	CREATEDDATE DATE,
	E4 VARCHAR(255),
	E5 VARCHAR(255),
	E6 VARCHAR(255),
	E7 VARCHAR(255),
	E8 VARCHAR(255),
	E9 VARCHAR(255),
	E10 VARCHAR(255),
	E11 VARCHAR(255),
	E13 VARCHAR(255),
	E16 VARCHAR(255),
	E17 VARCHAR(255),
	E18 VARCHAR(255),
	E46 VARCHAR(255),
	SESSIONID VARCHAR(50)
)
/

create table RECORDSTOBECOMPARED
(
	TRANSMISSIONID NUMBER not null,
	TRANSMISSIONRECORDID NUMBER not null,
	STATE VARCHAR(30),
	REPORTINGPERIODID NUMBER,
	REPORTINGPERIOD VARCHAR(255),
	STATEID NUMBER,
	FEDERALFILEID VARCHAR(552),
	E3_RECORD_NUMBER VARCHAR(255),
	SERVEDPOPULATION VARCHAR(30),
	OUTCOMEPOPULATION VARCHAR(30),
	CREATEDDATE DATE,
	E4 VARCHAR(255),
	E5 VARCHAR(255),
	E6 VARCHAR(255),
	E7 VARCHAR(255),
	E8 VARCHAR(255),
	E9 VARCHAR(255),
	E10 VARCHAR(255),
	E11 VARCHAR(255),
	E13 VARCHAR(255),
	E16 VARCHAR(255),
	E17 VARCHAR(255),
	E18 VARCHAR(255),
	E46 VARCHAR(255),
	SESSIONID VARCHAR(50)
)
/

create table ELEMENTLEVELDQASTANDARD
(
	ELEMENTLEVELDQASTDID NUMBER not null
		constraint PK_ELEMENTLEVELDQASTANDARD
			primary key,
	NAME VARCHAR(50),
	DATAQUALITYADVSTANDARD NUMBER,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	CONDITIONALDESCRIPTION VARCHAR(1000),
	ALLOWEDVALUEID NUMBER
		constraint ALLOWEDVALUEID_ELEMLEVQASTD
			references ALLOWEDVALUE
				on delete cascade,
	DATAQUALITYADVNOTATION VARCHAR(50),
	DQATEXT VARCHAR(1024)
)
/

create index IDX_ELELEVELDQASTAN_ALLWVALID
	on ELEMENTLEVELDQASTANDARD (ALLOWEDVALUEID)
/

create index IDX_ELELEVELDQASTAN_STANDARD
	on ELEMENTLEVELDQASTANDARD (DATAQUALITYADVSTANDARD)
/

create table SCHEDULERTRACKING
(
	SPNAME VARCHAR(250),
	DATERUNSP DATE
)
/

create table JAVA$OPTIONS
(
	WHAT VARCHAR(128),
	OPT VARCHAR(20),
	VALUE VARCHAR(128)
)
/

create table DQACOUNTREPORT
(
	TRANSMISSIONID NUMBER not null,
	REPORTINGPERIODID NUMBER,
	STATEID NUMBER,
	ELEMENTID NUMBER,
	ADVISORYTYPE VARCHAR(255),
	PROBLEMDESCRIPTIONID NUMBER,
	COUNT NUMBER,
	DQANAME VARCHAR(255),
	ELEMENTLEVELDQASTDID NUMBER
)
/

create table NONCOMPLIANCECOUNTREPORT
(
	TRANSMISSIONID NUMBER not null,
	REPORTINGPERIODID NUMBER,
	STATEID NUMBER,
	ELEMENTID NUMBER,
	ERRORTYPE VARCHAR(255),
	COMPLIANCECATEGORYID NUMBER,
	PROBLEMDESCRIPTIONID NUMBER,
	COUNT NUMBER
)
/

create table INACTIVERECORDTOEXPORT
(
	TRANSMISSIONID NUMBER not null,
	TRANSMISSIONRECORDID NUMBER not null,
	STATEID NUMBER,
	STATE VARCHAR(30),
	TRANSMISSIONTYPE VARCHAR(30),
	REPORTINGPERIODID NUMBER,
	REPORTINGPERIOD VARCHAR(255),
	E1_STATE VARCHAR(4),
	FEDERALFILEID VARCHAR(552),
	E3_RECORD_NUMBER VARCHAR(255),
	RECORD_NOTE VARCHAR(1000),
	E2 VARCHAR(255),
	E3NOTES VARCHAR(255),
	E4 VARCHAR(255),
	E4NOTES VARCHAR(255),
	E5 VARCHAR(255),
	E5NOTES VARCHAR(255),
	E6 VARCHAR(255),
	E6NOTES VARCHAR(255),
	E7 VARCHAR(255),
	E7NOTES VARCHAR(255),
	E8 VARCHAR(255),
	E8NOTES VARCHAR(255),
	E9 VARCHAR(255),
	E9NOTES VARCHAR(255),
	E10 VARCHAR(255),
	E10NOTES VARCHAR(255),
	E11 VARCHAR(255),
	E11NOTES VARCHAR(255),
	E12 VARCHAR(255),
	E12NOTES VARCHAR(255),
	E13 VARCHAR(255),
	E13NOTES VARCHAR(255),
	E14 VARCHAR(255),
	E14NOTES VARCHAR(255),
	E15 VARCHAR(255),
	E15NOTES VARCHAR(255),
	E16 VARCHAR(255),
	E16NOTES VARCHAR(255),
	E17 VARCHAR(255),
	E17NOTES VARCHAR(255),
	E18 VARCHAR(255),
	E18NOTES VARCHAR(255),
	E19 VARCHAR(255),
	E19NOTES VARCHAR(255),
	E20 VARCHAR(255),
	E20NOTES VARCHAR(255),
	E21 VARCHAR(255),
	E21NOTES VARCHAR(255),
	E22 VARCHAR(255),
	E22NOTES VARCHAR(255),
	E23 VARCHAR(255),
	E23NOTES VARCHAR(255),
	E24 VARCHAR(255),
	E24NOTES VARCHAR(255),
	E25 VARCHAR(255),
	E25NOTES VARCHAR(255),
	E26 VARCHAR(255),
	E26NOTES VARCHAR(255),
	E27 VARCHAR(255),
	E27NOTES VARCHAR(255),
	E28 VARCHAR(255),
	E28NOTES VARCHAR(255),
	E29 VARCHAR(255),
	E29NOTES VARCHAR(255),
	E30 VARCHAR(255),
	E30NOTES VARCHAR(255),
	E31 VARCHAR(255),
	E31NOTES VARCHAR(255),
	E32 VARCHAR(255),
	E32NOTES VARCHAR(255),
	E33 VARCHAR(255),
	E33NOTES VARCHAR(255),
	E34 VARCHAR(255),
	E34NOTES VARCHAR(255),
	E35 VARCHAR(255),
	E35NOTES VARCHAR(255),
	E36 VARCHAR(255),
	E36NOTES VARCHAR(255),
	E37 VARCHAR(255),
	E37NOTES VARCHAR(255),
	E38 VARCHAR(255),
	E38NOTES VARCHAR(255),
	E39 VARCHAR(255),
	E39NOTES VARCHAR(255),
	E40 VARCHAR(255),
	E40NOTES VARCHAR(255),
	E41 VARCHAR(255),
	E41NOTES VARCHAR(255),
	E42 VARCHAR(255),
	E42NOTES VARCHAR(255),
	E43 VARCHAR(255),
	E43NOTES VARCHAR(255),
	E44 VARCHAR(255),
	E44NOTES VARCHAR(255),
	E45 VARCHAR(255),
	E45NOTES VARCHAR(255),
	E46 VARCHAR(255),
	E46NOTES VARCHAR(255),
	E47 VARCHAR(255),
	E47NOTES VARCHAR(255),
	E48 VARCHAR(255),
	E48NOTES VARCHAR(255),
	E49 VARCHAR(255),
	E49NOTES VARCHAR(255),
	E50 VARCHAR(255),
	E50NOTES VARCHAR(255),
	E51 VARCHAR(255),
	E51NOTES VARCHAR(255),
	E52 VARCHAR(255),
	E52NOTES VARCHAR(255),
	E53 VARCHAR(255),
	E53NOTES VARCHAR(255),
	E54 VARCHAR(255),
	E54NOTES VARCHAR(255),
	E55 VARCHAR(255),
	E55NOTES VARCHAR(255),
	E56 VARCHAR(255),
	E56NOTES VARCHAR(255),
	E57 VARCHAR(255),
	E57NOTES VARCHAR(255),
	E58 VARCHAR(255),
	E58NOTES VARCHAR(255),
	SERVEDPOPULATION VARCHAR(30),
	OUTCOMEPOPULATION VARCHAR(30),
	CREATEDDATE DATE,
	FLAGE37E58BASELINEICC NUMBER
)
/

create table COHORTS
(
	COHORTSID NUMBER not null
		constraint PK_COHORTS
			primary key,
	NAME VARCHAR(25) not null,
	REPORTYEAR17 VARCHAR(5),
	REPORTYEAR19 VARCHAR(5),
	REPORTYEAR21 VARCHAR(5)
)
/

create unique index IND_COHORTS_UNIQ
	on COHORTS (NAME)
/

create table COHORTSTATUS
(
	COHORTSTATUSID NUMBER not null
		constraint PK_COHORTSTATS
			primary key,
	COHORTSID NUMBER not null
		constraint FK_COHORTS_COHORTSTATS
			references COHORTS,
	STATEID NUMBER not null
		constraint FK_STATE_COHORTSTATS
			references STATE,
	COHORTSIZE NUMBER default 0,
	SAMPLESIZE NUMBER default 0,
	PERIODLOCKED19 NUMBER default 0,
	PERIODLOCKED21 NUMBER default 0
)
/

create table COHORTRECORDS
(
	COHORTRECORDID NUMBER not null
		constraint PK_COHORTRECORDS
			primary key,
	COHORTSTATUSID NUMBER
		constraint FK_COHORTSTATS_COHORTRECORDS
			references COHORTSTATUS,
	RECORDNUMBER VARCHAR(255),
	SAMPLED NUMBER default 0,
	POPULATION21 NUMBER default 0,
	REPORTINGPERIODNAME VARCHAR(20),
	DATEINSERTED DATE default sysdate,
	WITHINRP NUMBER(1),
	OUTCOMEPOPULATION VARCHAR(30),
	FOLLOWUPRPNAME VARCHAR(20),
	NOTREPORTEDFOLLOWUP19 NUMBER(1) default 0
)
/

create unique index IND_COHORTRECORDS_UNIQ
	on COHORTRECORDS (COHORTSTATUSID, REPORTINGPERIODNAME, RECORDNUMBER)
/

create table ERROR_LOG
(
	ERRORTIME DATE default sysdate,
	ERRORMSG VARCHAR(4000)
)
/

create table LU_COHORTREPORTINGPERIOD
(
	COHORTSID NUMBER(4) not null
		primary key,
	REPORTYEAR17 VARCHAR(4),
	BASELINERP1 VARCHAR(5),
	BASELINERP2 VARCHAR(5),
	BASELINERP3 VARCHAR(5),
	REPORTYEAR19 VARCHAR(4),
	FOLLOWUP19PR1 VARCHAR(5),
	FOLLOWUP19PR2 VARCHAR(5),
	FOLLOWUP19PR3 VARCHAR(5),
	FOLLOWUP21PR1 VARCHAR(5),
	FOLLOWUP21PR2 VARCHAR(5),
	FOLLOWUP21PR3 VARCHAR(5),
	REPORTYEAR21 VARCHAR(4)
)
/

create table DEF_EMP
(
	LN VARCHAR(10),
	AGE NUMBER,
	SALARY NUMBER
)
/

create table RECORD
(
	TRANSMISSIONID NUMBER,
	TRANSMISSIONRECORDID NUMBER,
	STATEID NUMBER,
	REPORTINGPERIODID NUMBER,
	REGIONID NUMBER,
	SUBMISSIONSTATUS VARCHAR(255),
	REPORTINGPERIOD VARCHAR(255),
	E1_STATE VARCHAR(255),
	E1_ID NUMBER,
	FEDERALFILEID VARCHAR(556),
	E3_RECORD_NUMBER VARCHAR(255),
	E3_ID NUMBER,
	E2 VARCHAR(255),
	E2_ID NUMBER,
	E4_DATE_OF_BIRTH VARCHAR(255),
	E4_ID NUMBER,
	E5_SEX VARCHAR(255),
	E5_ID NUMBER,
	E6_RACE_AMRICAN_IND_ALSK_NATIV VARCHAR(255),
	E6_ID NUMBER,
	E7_RACE_ASIAN VARCHAR(255),
	E7_ID NUMBER,
	E8_RACE_BLACK_AFRICAN_AMERICAN VARCHAR(255),
	E8_ID NUMBER,
	E9_RACE_HAWAIAN_PACIFIC_ISLNDR VARCHAR(255),
	E9_ID NUMBER,
	E10_RACE_WHITE VARCHAR(255),
	E10_ID NUMBER,
	E11_RACE_UNKNOWN VARCHAR(255),
	E11_ID NUMBER,
	E12_RACE_DECLINED VARCHAR(255),
	E12_ID NUMBER,
	E13_HISPANIC_LATINO VARCHAR(255),
	E13_ID NUMBER,
	E14_FOSTER_CARE_STATUS_SERVICE VARCHAR(255),
	E14_ID NUMBER,
	E15_LOCAL_AGENCY VARCHAR(255),
	E15_ID NUMBER,
	E16_FEDERALLY_RECOGNIZED_TRIBE VARCHAR(255),
	E16_ID NUMBER,
	E17_ADJUDICATED_DELINQUENT VARCHAR(255),
	E17_ID NUMBER,
	E18_EDUCATION_LEVEL VARCHAR(255),
	E18_ID NUMBER,
	E19_SPECIAL_EDUCATION_STATUS VARCHAR(255),
	E19_ID NUMBER,
	E20_INDPEND_LIVING_NEED_ASSESS VARCHAR(255),
	E20_ID NUMBER,
	E21_ACADEMIC_SUPPORT VARCHAR(255),
	E21_ID NUMBER,
	E22_POST_SECONDARY_EDUC_SUPORT VARCHAR(255),
	E22_ID NUMBER,
	E23_CAREER_PREPARATION VARCHAR(255),
	E23_ID NUMBER,
	E24_EMPLOYMENT_PROGRAMS VARCHAR(255),
	E24_ID NUMBER,
	E25_BUDGET_FINANCIAL_MGMTS VARCHAR(255),
	E25_ID NUMBER,
	E26_HOUS_EDUC_HOME_MGMT_TRAING VARCHAR(255),
	E26_ID NUMBER,
	E27_HEALTH_EDUC_RSK_PREVENTION VARCHAR(255),
	E27_ID NUMBER,
	E28_FAMY_SUPT_HEALT_MARRI_EDUC VARCHAR(255),
	E28_ID NUMBER,
	E29_MENTORING VARCHAR(255),
	E29_ID NUMBER,
	E30_SUPERVISED_INDPEND_LIVING VARCHAR(255),
	E30_ID NUMBER,
	E31_ROOM_BOARD_FINANCL_ASSIST VARCHAR(255),
	E31_ID NUMBER,
	E32_EDUC_FINANCIAL_ASSIST VARCHAR(255),
	E32_ID NUMBER,
	E33_OTHER_FINANCIAL_ASSIST VARCHAR(255),
	E33_ID NUMBER,
	E34_OUTCOMES_REPORTING_STATUS VARCHAR(255),
	E34_ID NUMBER,
	E35_DATE_OUTCOME_DATA_COLLECTN VARCHAR(255),
	E35_ID NUMBER,
	E36_FOSTER_CARE_STATUS_OUTCOME VARCHAR(255),
	E36_ID NUMBER,
	E37_CURRENT_FULL_TIME_EMPLYMNT VARCHAR(255),
	E37_ID NUMBER,
	E38_CURRENT_PART_TIME_EMPLYMNT VARCHAR(255),
	E38_ID NUMBER,
	E39_EMPLOYMENT_RELATED_SKILLS VARCHAR(255),
	E39_ID NUMBER,
	E40_SOCIAL_SECURITY VARCHAR(255),
	E40_ID NUMBER,
	E41_EDUC_AID VARCHAR(255),
	E41_ID NUMBER,
	E42_PUBLIC_FINANCIAL_ASSIST VARCHAR(255),
	E42_ID NUMBER,
	E43_PUBLIC_FOOD_ASSIST VARCHAR(255),
	E43_ID NUMBER,
	E44_PUBLIC_HOUSING_ASSIST VARCHAR(255),
	E44_ID NUMBER,
	E45_OTHER_FINANCIAL_SUPPORT VARCHAR(255),
	E45_ID NUMBER,
	E46_HIGHEST_EDUC_CERTIFICATION VARCHAR(255),
	E46_ID NUMBER,
	E47_CURRNT_ENROLLMNT_ATTENDANC VARCHAR(255),
	E47_ID NUMBER,
	E48_CONNECTION_ADULT VARCHAR(255),
	E48_ID NUMBER,
	E49_HOMELESSNESS VARCHAR(255),
	E49_ID NUMBER,
	E50_SUBSTANCE_ABUSE_REFERRAL VARCHAR(255),
	E50_ID NUMBER,
	E51_INCARCERATION VARCHAR(255),
	E51_ID NUMBER,
	E52_CHILDREN VARCHAR(255),
	E52_ID NUMBER,
	E53_MARRIAGE_AT_CHILDS_BIRTH VARCHAR(255),
	E53_ID NUMBER,
	E54_MEDICAID VARCHAR(255),
	E54_ID NUMBER,
	E55_OTHER_HEALTH_INSURANCE VARCHAR(255),
	E55_ID NUMBER,
	E56_HEALTH_INSURE_TYPE_MEDICAL VARCHAR(255),
	E56_ID NUMBER,
	E57_HEALTH_INSURE_TYPE_MENTAL VARCHAR(255),
	E57_ID NUMBER,
	E58_HEALT_INSUR_TYP_PRESC_DRUG VARCHAR(255),
	E58_ID NUMBER,
	E2_NOTE VARCHAR(250),
	E3_NOTE VARCHAR(250),
	E4_NOTE VARCHAR(250),
	E5_NOTE VARCHAR(250),
	E6_NOTE VARCHAR(250),
	E7_NOTE VARCHAR(250),
	E8_NOTE VARCHAR(250),
	E9_NOTE VARCHAR(250),
	E10_NOTE VARCHAR(250),
	E11_NOTE VARCHAR(250),
	E12_NOTE VARCHAR(250),
	E13_NOTE VARCHAR(250),
	E14_NOTE VARCHAR(250),
	E15_NOTE VARCHAR(250),
	E16_NOTE VARCHAR(250),
	E17_NOTE VARCHAR(250),
	E18_NOTE VARCHAR(250),
	E19_NOTE VARCHAR(250),
	E20_NOTE VARCHAR(250),
	E21_NOTE VARCHAR(250),
	E22_NOTE VARCHAR(250),
	E23_NOTE VARCHAR(250),
	E24_NOTE VARCHAR(250),
	E25_NOTE VARCHAR(250),
	E26_NOTE VARCHAR(250),
	E27_NOTE VARCHAR(250),
	E28_NOTE VARCHAR(250),
	E29_NOTE VARCHAR(250),
	E30_NOTE VARCHAR(250),
	E31_NOTE VARCHAR(250),
	E32_NOTE VARCHAR(250),
	E33_NOTE VARCHAR(250),
	E34_NOTE VARCHAR(250),
	E35_NOTE VARCHAR(250),
	E36_NOTE VARCHAR(250),
	E37_NOTE VARCHAR(250),
	E38_NOTE VARCHAR(250),
	E39_NOTE VARCHAR(250),
	E40_NOTE VARCHAR(250),
	E41_NOTE VARCHAR(250),
	E42_NOTE VARCHAR(250),
	E43_NOTE VARCHAR(250),
	E44_NOTE VARCHAR(250),
	E45_NOTE VARCHAR(250),
	E46_NOTE VARCHAR(250),
	E47_NOTE VARCHAR(250),
	E48_NOTE VARCHAR(250),
	E49_NOTE VARCHAR(250),
	E50_NOTE VARCHAR(250),
	E51_NOTE VARCHAR(250),
	E52_NOTE VARCHAR(250),
	E53_NOTE VARCHAR(250),
	E54_NOTE VARCHAR(250),
	E55_NOTE VARCHAR(250),
	E56_NOTE VARCHAR(250),
	E57_NOTE VARCHAR(250),
	E58_NOTE VARCHAR(250),
	AGE NUMBER(5,2),
	SERVEDPOPULATIONID NUMBER,
	OUTCOMEPOPULATIONID NUMBER,
	SERVEDPOPULATION NUMBER,
	OUTCOMEPOPULATION NUMBER,
	ISE14VALID NUMBER(2) default 0,
	ISE34VALID NUMBER(2) default 0,
	ISE36VALID NUMBER(2) default 0,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	RECORD_NOTE VARCHAR(2000),
	ISINCOHORT NUMBER default 0,
	ISINSAMPLE NUMBER default 0,
	ISINEFFECTIVECOHORT NUMBER(2) default 0,
	BDAY VARCHAR(100),
	PREVBDAY VARCHAR(100)
)
/

create table OUTCOMEREPORT
(
	OUTCOMEREPORTID NUMBER not null
		primary key,
	REPORTINGPERIODID NUMBER not null
		constraint FK_OUTCOMEREPORT_RPID
			references REPORTINGPERIOD,
	COHORTSTATUSID NUMBER not null
		constraint FK_OUTCOMERP_COHORTSTATUSID
			references COHORTSTATUS,
	COHORTSIZE NUMBER default 0,
	SAMPLESIZE NUMBER default 0,
	OUTCOMEUNIVERSECOUNT NUMBER default 0,
	NOTREPORTEDYOUTHCOUNT NUMBER default 0,
	INVALIDE34YOUTHCOUNT NUMBER default 0,
	OUTCOMEPERCENTAGE NUMBER default 0.00,
	FCPARTCOUNT NUMBER default 0,
	FCEXCLUDEDCOUNT NUMBER default 0,
	FCNOTPARTCOUNT NUMBER default 0,
	FCPARTPERCENTAGE NUMBER default 0,
	DCPARTCOUNT NUMBER default 0,
	DCEXCLUDEDCOUNT NUMBER default 0,
	DCNOTPARTCOUNT NUMBER default 0,
	DCPARTPERCENTAGE NUMBER default 0.00,
	FCCOUNT NUMBER default 0,
	DCCOUNT NUMBER default 0,
	BASELINERPNAME VARCHAR(10),
	POSTBUFFERRPNAME VARCHAR(10),
	FOLLOWUP19RPNAME VARCHAR(10),
	TRANSMISSIONID NUMBER,
	SUBMISSIONSTATUS VARCHAR(10)
)
/

create index IDX_OUTCOMEREPORT_RPID
	on OUTCOMEREPORT (REPORTINGPERIODID)
/

create index IDX_OUTCOMEREPORT_CSID
	on OUTCOMEREPORT (COHORTSTATUSID)
/

create table OUTCOMESREPORTDATA
(
	OUTCOMESREPORTDATAID NUMBER,
	TRANSMISSIONID NUMBER,
	COHORTSTATUSID NUMBER,
	RECORDNUMBER VARCHAR(255),
	OU19NOTREPORTED NUMBER(1),
	OU19INVALIDE34 NUMBER(1),
	OU21NOTREPORTED NUMBER(1),
	OU21INVALIDE34 NUMBER(1),
	FC19NOTPARTICIPATED NUMBER(1),
	DC19NOTPARTICIPATED NUMBER(1),
	FC21NOTPARTICIPATED NUMBER(1),
	DC21NOTPARTICIPATED NUMBER(1)
)
/

create table SDPREQUEST
(
	SDPREQUESTID NUMBER not null
		primary key,
	STATEID NUMBER,
	RPYEAR VARCHAR(10),
	PERIOD VARCHAR(2),
	POPULATIONTYPE VARCHAR(50),
	CREATEDATE DATE,
	REQUESTSTATUS VARCHAR(50),
	REQUESTTYPE VARCHAR(50),
	REPORTRUNDATE DATE,
	PURGEREPORT NUMBER(2) default 0,
	DATEPURGEFLAGGED DATE,
	DATEPURGEEXECUTED DATE
)
/

create table SERVEDSNAPSHOT
(
	SERVEDFACTID NUMBER not null
		primary key,
	SDPREQUESTID NUMBER
		references SDPREQUEST
)
/

create table SERVEDSTATS
(
	SERVEDFACTID NUMBER not null
		primary key
		references SERVEDSNAPSHOT
			on delete cascade,
	TOTALYOUTHCOUNT NUMBER,
	SERVEDYOUTHCOUNT NUMBER,
	MINAGE NUMBER,
	MAXAGE NUMBER,
	MEANAGE NUMBER
)
/

create table SERVEDYOUTHCHARACTERISTICS
(
	SERVEDFACTID NUMBER not null
		primary key
		references SERVEDSNAPSHOT
			on delete cascade,
	MALESTR VARCHAR(20),
	MALE NUMBER,
	FEMALESTR VARCHAR(20),
	FEMALE NUMBER,
	WHITESTR VARCHAR(20),
	WHITE NUMBER,
	BLACKSTR VARCHAR(20),
	BLACK NUMBER,
	AMINDSTR VARCHAR(20),
	AMIND NUMBER,
	ASIANSTR VARCHAR(20),
	ASIAN NUMBER,
	HAWAIIANSTR VARCHAR(20),
	HAWAIIAN NUMBER,
	UNKNOWNSTR VARCHAR(20),
	UNKNOWN NUMBER,
	HISPANICSTR VARCHAR(20),
	HISPANIC NUMBER,
	DECLINEDSTR VARCHAR(20),
	DECLINED NUMBER,
	FOSTERCARESTR VARCHAR(20),
	FOSTERCARE NUMBER,
	TRIBESTR VARCHAR(20),
	TRIBE NUMBER,
	DELIQUENTSTR VARCHAR(20),
	DELIQUENT NUMBER,
	ESPEDUSTR VARCHAR(20),
	ESPEDU NUMBER
)
/

create table SERVEDSERVICESRECEIVED
(
	SERVEDFACTID NUMBER not null
		primary key
		references SERVEDSNAPSHOT
			on delete cascade,
	ZEROPERCENTSTR VARCHAR(20),
	ZEROPERCENT NUMBER,
	ZEROCOUNT NUMBER,
	ONETWOPERCENTSTR VARCHAR(20),
	ONETWOPERCENT NUMBER,
	ONETWOCOUNT NUMBER,
	THREEFOURPERCENTSTR VARCHAR(20),
	THREEFOURPERCENT NUMBER,
	THREEFOURCOUNT NUMBER,
	FIVEMOREPERCENTSTR VARCHAR(20),
	FIVEMOREPERCENT NUMBER,
	FIVEMORECOUNT NUMBER
)
/

create table SERVEDEDULEVELDETAIL
(
	SERVEDFACTID NUMBER not null
		primary key
		references SERVEDSNAPSHOT
			on delete cascade,
	UNDERSIXSTR VARCHAR(20),
	UNDERSIX NUMBER,
	UNDERSIXAVGAGE NUMBER,
	SIXSTR VARCHAR(20),
	SIX NUMBER,
	SIXAVGAGE NUMBER,
	SEVENSTR VARCHAR(20),
	SEVEN NUMBER,
	SEVENAVGAGE NUMBER,
	EIGHTSTR VARCHAR(20),
	EIGHT NUMBER,
	EIGHTAVGAGE NUMBER,
	NINESTR VARCHAR(20),
	NINE NUMBER,
	NINEAVGAGE NUMBER,
	TENSTR VARCHAR(20),
	TEN NUMBER,
	TENAVGAGE NUMBER,
	ELEVENSTR VARCHAR(20),
	ELEVEN NUMBER,
	ELEVENAVGAGE NUMBER,
	TWELVESTR VARCHAR(20),
	TWELVE NUMBER,
	TWELVEAVGAGE NUMBER,
	POSTSECSTR VARCHAR(20),
	POSTSEC NUMBER,
	POSTSECAVGAGE NUMBER,
	COLLEGESTR VARCHAR(20),
	COLLEGE NUMBER,
	COLLEGEAVGAGE NUMBER,
	BLANKSTR VARCHAR(20),
	BLANK NUMBER,
	BLANKAVGAGE NUMBER,
	OUTRANGESTR VARCHAR(20),
	OUTRANGE NUMBER,
	OUTRANGEAVGAGE NUMBER
)
/

create table SERVEDSERVICETYPES
(
	SERVEDFACTID NUMBER not null
		primary key
		references SERVEDSNAPSHOT
			on delete cascade,
	E20COUNT NUMBER,
	E20PERCENT NUMBER,
	E20PERCENTSTR VARCHAR(20),
	E21COUNT NUMBER,
	E21PERCENT NUMBER,
	E21PERCENTSTR VARCHAR(20),
	E22COUNT NUMBER,
	E22PERCENT NUMBER,
	E22PERCENTSTR VARCHAR(20),
	E23COUNT NUMBER,
	E23PERCENT NUMBER,
	E23PERCENTSTR VARCHAR(20),
	E24COUNT NUMBER,
	E24PERCENT NUMBER,
	E24PERCENTSTR VARCHAR(20),
	E25COUNT NUMBER,
	E25PERCENT NUMBER,
	E25PERCENTSTR VARCHAR(20),
	E26COUNT NUMBER,
	E26PERCENT NUMBER,
	E26PERCENTSTR VARCHAR(20),
	E27COUNT NUMBER,
	E27PERCENT NUMBER,
	E27PERCENTSTR VARCHAR(20),
	E28COUNT NUMBER,
	E28PERCENT NUMBER,
	E28PERCENTSTR VARCHAR(20),
	E29COUNT NUMBER,
	E29PERCENT NUMBER,
	E29PERCENTSTR VARCHAR(20),
	E30COUNT NUMBER,
	E30PERCENT NUMBER,
	E30PERCENTSTR VARCHAR(20),
	E31COUNT NUMBER,
	E31PERCENT NUMBER,
	E31PERCENTSTR VARCHAR(20),
	E32COUNT NUMBER,
	E32PERCENT NUMBER,
	E32PERCENTSTR VARCHAR(20),
	E33COUNT NUMBER,
	E33PERCENT NUMBER,
	E33PERCENTSTR VARCHAR(20)
)
/

create table STATEREPORT
(
	STATEREPORTID NUMBER not null
		primary key,
	STATEID NUMBER,
	RPYEAR VARCHAR(10),
	REPORTINGPERIOD VARCHAR(10),
	POPULATIONTYPE VARCHAR(50),
	TOTALYTHCOUNT NUMBER,
	SERVEDYTHCOUNT NUMBER,
	MINAGE NUMBER,
	MAXAGE NUMBER,
	MEANAGE NUMBER,
	CREATEDATE DATE,
	SURVEYRATESTR VARCHAR(20),
	AVGDAYSTOSURVEY NUMBER,
	PCTSURVEYEDONTIME VARCHAR(20),
	TOTYTHCOHORT NUMBER,
	TOTYTHCOHRPTED NUMBER,
	PCTRECVDSERVICESTR VARCHAR(20),
	YTHINFOSTERCARE NUMBER,
	PCTINFOSTERCARESTR VARCHAR(20),
	YTHOUTFOSTERCARE NUMBER,
	PCTOUTFOSTERCARESTR VARCHAR(20),
	TOTYTHSAMPLE NUMBER,
	TOTYTHSMPRPTED NUMBER,
	REPORTYEAR17 VARCHAR(4)
)
/

create table STATEREPORTSERVICESRECEIVED
(
	STATEREPORTID NUMBER not null
		primary key
		references STATEREPORT
			on delete cascade,
	ZEROPERCENTSTR VARCHAR(20),
	ZEROPERCENT NUMBER,
	ZEROCOUNT NUMBER,
	ONETWOPERCENTSTR VARCHAR(20),
	ONETWOPERCENT NUMBER,
	ONETWOCOUNT NUMBER,
	THREEFOURPERCENTSTR VARCHAR(20),
	THREEFOURPERCENT NUMBER,
	THREEFOURCOUNT NUMBER,
	FIVEMOREPERCENTSTR VARCHAR(20),
	FIVEMOREPERCENT NUMBER,
	FIVEMORECOUNT NUMBER,
	CREATEDATE DATE default sysdate
)
/

create table STATEREPORTEDULEVELDETAIL
(
	STATEREPORTID NUMBER not null
		primary key
		references STATEREPORT
			on delete cascade,
	UNDERSIXSTR VARCHAR(20),
	UNDERSIX NUMBER,
	UNDERSIXAVGAGE NUMBER,
	SIXSTR VARCHAR(20),
	SIX NUMBER,
	SIXAVGAGE NUMBER,
	SEVENSTR VARCHAR(20),
	SEVEN NUMBER,
	SEVENAVGAGE NUMBER,
	EIGHTSTR VARCHAR(20),
	EIGHT NUMBER,
	EIGHTAVGAGE NUMBER,
	NINESTR VARCHAR(20),
	NINE NUMBER,
	NINEAVGAGE NUMBER,
	TENSTR VARCHAR(20),
	TEN NUMBER,
	TENAVGAGE NUMBER,
	ELEVENSTR VARCHAR(20),
	ELEVEN NUMBER,
	ELEVENAVGAGE NUMBER,
	TWELVESTR VARCHAR(20),
	TWELVE NUMBER,
	TWELVEAVGAGE NUMBER,
	POSTSECSTR VARCHAR(20),
	POSTSEC NUMBER,
	POSTSECAVGAGE NUMBER,
	COLLEGESTR VARCHAR(20),
	COLLEGE NUMBER,
	COLLEGEAVGAGE NUMBER,
	BLANKSTR VARCHAR(20),
	BLANK NUMBER,
	BLANKAVGAGE NUMBER,
	OUTRANGESTR VARCHAR(20),
	OUTRANGE NUMBER,
	OUTRANGEAVGAGE NUMBER,
	CREATEDATE DATE default sysdate
)
/

create table STATEREPORTSERVICETYPES
(
	STATEREPORTID NUMBER not null
		primary key
		references STATEREPORT
			on delete cascade,
	E20COUNT NUMBER,
	E20PERCENT NUMBER,
	E20PERCENTSTR VARCHAR(20),
	E21COUNT NUMBER,
	E21PERCENT NUMBER,
	E21PERCENTSTR VARCHAR(20),
	E22COUNT NUMBER,
	E22PERCENT NUMBER,
	E22PERCENTSTR VARCHAR(20),
	E23COUNT NUMBER,
	E23PERCENT NUMBER,
	E23PERCENTSTR VARCHAR(20),
	E24COUNT NUMBER,
	E24PERCENT NUMBER,
	E24PERCENTSTR VARCHAR(20),
	E25COUNT NUMBER,
	E25PERCENT NUMBER,
	E25PERCENTSTR VARCHAR(20),
	E26COUNT NUMBER,
	E26PERCENT NUMBER,
	E26PERCENTSTR VARCHAR(20),
	E27COUNT NUMBER,
	E27PERCENT NUMBER,
	E27PERCENTSTR VARCHAR(20),
	E28COUNT NUMBER,
	E28PERCENT NUMBER,
	E28PERCENTSTR VARCHAR(20),
	E29COUNT NUMBER,
	E29PERCENT NUMBER,
	E29PERCENTSTR VARCHAR(20),
	E30COUNT NUMBER,
	E30PERCENT NUMBER,
	E30PERCENTSTR VARCHAR(20),
	E31COUNT NUMBER,
	E31PERCENT NUMBER,
	E31PERCENTSTR VARCHAR(20),
	E32COUNT NUMBER,
	E32PERCENT NUMBER,
	E32PERCENTSTR VARCHAR(20),
	E33COUNT NUMBER,
	E33PERCENT NUMBER,
	E33PERCENTSTR VARCHAR(20),
	CREATEDATE DATE default sysdate
)
/

create table STATEREPORTOUTCOMES
(
	ID NUMBER not null
		constraint PK_STATEREPORTOUTCOMES
			primary key,
	STATEREPORTID NUMBER
		constraint FK_STATEREPORT_SPOUTCOMES
			references STATEREPORT
				on delete cascade,
	EMPLOYED VARCHAR(20),
	RECEIVINGTRAINING VARCHAR(20),
	RECEIVINGSSPAY VARCHAR(20),
	RECEIVINGEDUAID VARCHAR(20),
	RECEIVINGOTHSUPT VARCHAR(20),
	RECEIVINGPUBFIN VARCHAR(20),
	RECEIVINGPUBFOOD VARCHAR(20),
	RECEIVINGPUBHOUS VARCHAR(20),
	ATTENDINGSCHOOL VARCHAR(20),
	COMPLETEDHSORGED VARCHAR(20),
	RECEIVINGLICENSE VARCHAR(20),
	RECEIVINGDEGREE VARCHAR(20),
	SABUSEREFERRAL VARCHAR(20),
	INCARCERATED VARCHAR(20),
	HAVINGCHILDREN VARCHAR(20),
	HOMELESS VARCHAR(20),
	CONNECTIONTOADULT VARCHAR(20),
	HAVINGMEDICAID VARCHAR(20),
	HEALTHINSURANCE VARCHAR(20),
	FOSTERCARETYPE VARCHAR(3),
	CREATEDATE DATE default sysdate
)
/

create table STATEREPORTDEMOGRAPHICS
(
	ID NUMBER not null
		constraint PK_STATEREPORTDEMOGRAPHICS
			primary key,
	STATEREPORTID NUMBER
		constraint FK_STATEREPORT_SPDEMOGRAPHICS
			references STATEREPORT
				on delete cascade,
	MALESTR VARCHAR(20),
	MALE NUMBER default 0,
	FEMALESTR VARCHAR(20),
	FEMALE NUMBER default 0,
	WHITESTR VARCHAR(20),
	WHITE NUMBER default 0,
	BLACKSTR VARCHAR(20),
	BLACK NUMBER default 0,
	AMINDSTR VARCHAR(20),
	AMIND NUMBER default 0,
	ASIANSTR VARCHAR(20),
	ASIAN NUMBER default 0,
	HAWAIIANSTR VARCHAR(20),
	HAWAIIAN NUMBER default 0,
	UNKNOWNSTR VARCHAR(20),
	UNKNOWN NUMBER default 0,
	HISPANICSTR VARCHAR(20),
	HISPANIC NUMBER default 0,
	DECLINEDSTR VARCHAR(20),
	DECLINED NUMBER default 0,
	FOSTERCARESTR VARCHAR(20),
	FOSTERCARE NUMBER default 0,
	TRIBESTR VARCHAR(20),
	TRIBE NUMBER default 0,
	DELIQUENTSTR VARCHAR(20),
	DELIQUENT NUMBER default 0,
	ESPEDUSTR VARCHAR(20),
	ESPEDU NUMBER default 0,
	RECEIVEDSERVSTR VARCHAR(20),
	RECEIVEDSERV NUMBER default 0,
	FOSTERCARETYPE VARCHAR(3),
	CREATEDATE DATE default sysdate
)
/

create table STATEREPORTREASONNONPARTI
(
	ID NUMBER not null
		constraint PK_STATEREPORTREASONNONPARTI
			primary key,
	STATEREPORTID NUMBER
		constraint FK_STATEREPORT_SPREASONNONP
			references STATEREPORT
				on delete cascade,
	YOUTHDECLINED VARCHAR(20),
	PARENTDECLINED VARCHAR(20),
	INCAPACITATED VARCHAR(20),
	INCARCERATED VARCHAR(20),
	RUNAWAYMISSING VARCHAR(20),
	UNABLELOCATE VARCHAR(20),
	NOTINSAMPLE VARCHAR(20),
	DEATH VARCHAR(20),
	FOSTERCARETYPE VARCHAR(3),
	CREATEDATE DATE default sysdate
)
/

create table SITEUSERSTATERGN
(
	SITEUSERSTATERGNID NUMBER not null
		constraint PK_SITEUSERSTATERGN
			primary key
		constraint NN_SITEUSERSTATERGNID
			check ("SITEUSERSTATERGNID" IS NOT NULL),
	SITEUSERID NUMBER
		constraint SITEUSER_SITEUSERSTATERGN
			references SITEUSER,
	STATEID NUMBER
		constraint STATE_SITEUSERSTATERGN
			references STATE,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255)
)
/

create table MESSAGE
(
	MESSAGEID NUMBER not null
		constraint PK_MESSAGE
			primary key
		constraint NN_MESSAGEID
			check ("MESSAGEID" IS NOT NULL),
	SUBJECT VARCHAR(255),
	MESSAGEBODY VARCHAR(2000),
	SITEUSERID NUMBER,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	PARENTMESSAGEID NUMBER
		constraint MESSAGE_MESSAGE
			references MESSAGE,
	MESSAGEBODYCLOB CLOB
)
/

create table MESSAGERECIPIENT
(
	MESSAGERECIPIENTID NUMBER not null
		constraint PK_MESSAGERECIPIENT
			primary key
		constraint NN_MESSAGERECIPIENTID
			check ("MESSAGERECIPIENTID" IS NOT NULL),
	MESSAGEID NUMBER not null
		constraint MESSAGE_MESSAGERECIPIENT
			references MESSAGE
		constraint NN_MESSAGEID1
			check ("MESSAGEID" IS NOT NULL),
	SITEUSERID NUMBER
		constraint SITEUSER_MESSAGERECIPIENT
			references SITEUSER,
	NAME VARCHAR(50),
	CREATEDDATE DATE default sysdate,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table XMLDATA
(
	XMLDATAID NUMBER not null
		constraint PK_XMLDATA
			primary key
		constraint NN_XMLDATAID
			check ("XMLDATAID" IS NOT NULL),
	USERDATA SYS.XMLTYPE,
	CREATEDDATE DATE
)
/

create table TRANSMISSION
(
	TRANSMISSIONID NUMBER not null
		constraint PK_TRANSMISSION
			primary key
		constraint NN_TRANSMISSIONID
			check ("TRANSMISSIONID" IS NOT NULL),
	NAME VARCHAR(255),
	FILEID VARCHAR(255),
	FILEGENERATIONDATE VARCHAR(255),
	TRANSMISSIONTYPEID NUMBER
		constraint FK_TRANSMISSION_TRANSTYPE
			references TRANSMISSIONTYPE,
	REPORTINGPERIODID NUMBER
		constraint REPORTINGPERIOD_TRANSMISSION
			references REPORTINGPERIOD,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	PROCESSINGSTATUS VARCHAR(100),
	SUBMISSIONSTATUS VARCHAR(100),
	FILENAME VARCHAR(255),
	FILESIZE NUMBER,
	FILERECEIVEDDATE DATE,
	STATEID NUMBER
		constraint STATE_TRANSMISSION
			references STATE
				on delete cascade,
	XMLDATAID NUMBER
		constraint TRANSMISSION_XMLDATA
			references XMLDATA
				on delete cascade,
	SUBMITTEDDATE DATE,
	SITEUSERID NUMBER,
	PROCESSEDSTATUS VARCHAR(255),
	RECORDCOUNT NUMBER,
	DATVALUECOMPLIANTCNT NUMBER,
	DATVALUEDATQUALADVISCNT NUMBER,
	TIMELYERRCNT NUMBER,
	FORMATERRCNT NUMBER,
	RECORDLEVELERRCNT NUMBER,
	TRANSMISSIONLEVELERRCNT NUMBER,
	POTENTIALPENALTY NUMBER,
	COMPLIANCESTATUS VARCHAR(255),
	DATAFILETRANSMISSIONTYPEVALUE VARCHAR(255),
	PROCESSINGEXCEPTION VARCHAR(1000),
	DATAFILEREPORTDATEVALUE VARCHAR(255),
	DATAFILESTATEVALUE VARCHAR(255),
	IMPROPERFORMATTEDVALCNT NUMBER,
	RECORDLEVELDQACNT NUMBER,
	ELEMENTLEVELDQACNT NUMBER,
	DUPLICATERECORDSCNT NUMBER,
	RECORDSINERRORCNT NUMBER
)
/

create table NONCOMPLIANCE
(
	NONCOMPLIANCEID NUMBER not null
		constraint PK_NONCOMPLIANCE
			primary key
		constraint NN_NONCOMPLIANCEID
			check ("NONCOMPLIANCEID" IS NOT NULL),
	TRANSMISSIONID NUMBER
		constraint TRANSMISSION_NONCOMPLIANCE
			references TRANSMISSION
				on delete cascade,
	DATUMID NUMBER,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	COMPLIANCETYPE NUMBER,
	ELEMENTID NUMBER
		constraint ELEMENT_NONCOMPLIANCE
			references ELEMENT
				on delete cascade
)
/

create index IDX_NONCOMPL_TRANSMISSIONID
	on NONCOMPLIANCE (TRANSMISSIONID)
/

create index IDX_NONCOMPLIANCE_DATUMID
	on NONCOMPLIANCE (DATUMID)
/

create index IDX_NONCOMPLIANCE_COMPTYPE
	on NONCOMPLIANCE (COMPLIANCETYPE)
/

create table DATAAGGREGATE
(
	DATAAGGREGATEID NUMBER not null
		constraint PK_DATAAGGREGATE
			primary key
		constraint NN_DATAAGGREGATEID
			check ("DATAAGGREGATEID" IS NOT NULL),
	NAME VARCHAR(255),
	AGGREGATETYPE NUMBER,
	NONCOMPLIANCEID NUMBER
		constraint FK_COMPLIANCE_DATAAGGREGATE
			references NONCOMPLIANCE
				on delete cascade,
	ELEMENTID NUMBER
		constraint FK_ELEMENT_DATAAGGREGATE
			references ELEMENT
				on delete cascade,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	TRANSMISSIONID NUMBER
		constraint TRANSMISSION_DATAAGGREGATE
			references TRANSMISSION
				on delete cascade,
	COUNTVALUE NUMBER,
	PERCENTVALUE NUMBER
)
/

create index IDX_DATAAGGREG_TRANSMISSIONID
	on DATAAGGREGATE (TRANSMISSIONID)
/

create index IDX_DATAAGGREG_AGGTYPE
	on DATAAGGREGATE (AGGREGATETYPE)
/

create index IDX_DATAAGGREG_ELEMENTID
	on DATAAGGREGATE (ELEMENTID)
/

create table DATAQUALITYADVAGGREGATE
(
	DATAQUALITYADVAGGREGATEID NUMBER not null
		constraint PK_DATAQUALITYADVAGGREGATE
			primary key,
	DATAQUALITYADVSTANDARDID NUMBER,
	TRANSMISSIONID NUMBER
		constraint TRANSMISSION_DATAADVAGGREGATE
			references TRANSMISSION
				on delete cascade,
	COUNTVALUE NUMBER,
	PERCENTVALUE NUMBER,
	NAME VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	CREATEDDATE DATE default sysdate,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DATUMVALUE VARCHAR(255)
)
/

create index IDX_DATAQUALADV_TRANS
	on DATAQUALITYADVAGGREGATE (TRANSMISSIONID)
/

create table ERROR
(
	ERRORID NUMBER not null
		constraint PK_ERROR
			primary key
		constraint NN__ERRORID
			check ("ERRORID" IS NOT NULL),
	NAME VARCHAR(1000),
	PROBLEMDESCRIPTIONID NUMBER
		constraint FK_ERROR_PROBLEMDESCRIPTION
			references PROBLEMDESCRIPTION
				on delete cascade,
	COMPLIANCECATEGORYID NUMBER
		constraint COMPLIANCECATEGORY_ERROR
			references COMPLIANCECATEGORY
				on delete cascade,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	NONCOMPLIANCEID NUMBER
		constraint NONCOMPLIANCE_ERROR
			references NONCOMPLIANCE
				on delete cascade,
	ERRORTYPE VARCHAR(50),
	REFERENCEELEMENTID NUMBER,
	REFERENCEDATUMVALUE VARCHAR(255)
)
/

create index IDX_ERROR_COMPLIANCECAT
	on ERROR (COMPLIANCECATEGORYID)
/

create index IDX_ERROR_ERRORTYPE
	on ERROR (ERRORTYPE)
/

create index IDX_ERROR_COMPLIANCE
	on ERROR (NONCOMPLIANCEID)
/

create index IDX_TRANSMISSION_REPORTPD
	on TRANSMISSION (REPORTINGPERIODID)
/

create index IDX_TRANSMISSION_FILEID
	on TRANSMISSION (FILEID)
/

create index IDX_TRANSMISSION_XMLDATAID
	on TRANSMISSION (XMLDATAID)
/

create index IDX_TRANSMISSION_SITEUSERID
	on TRANSMISSION (SITEUSERID)
/

create index IDX_TRANSMISSION_PROCSTATUS
	on TRANSMISSION (PROCESSINGSTATUS)
/

create index IDX_TRANSMISSION_TRANSSTATUS
	on TRANSMISSION (SUBMISSIONSTATUS)
/

create index IDX_TRANSMISSION_TRANSTYPE
	on TRANSMISSION (TRANSMISSIONTYPEID)
/

create index IDX_TRANSMISSION_STATEID
	on TRANSMISSION (STATEID)
/

create table TRANSMISSIONRECORD
(
	TRANSMISSIONRECORDID NUMBER not null
		constraint PK_TRANSMISSIONRECORD
			primary key
		constraint NN_TRANSMISSIONRECORDID
			check ("TRANSMISSIONRECORDID" IS NOT NULL),
	NAME VARCHAR(255),
	RECORDNUMBER VARCHAR(255),
	NOTES VARCHAR(1000),
	TRANSMISSIONID NUMBER
		constraint TRANSMISSION_TRANSMISSIONREC
			references TRANSMISSION
				on delete cascade,
	SERVEDPOPULATIONID NUMBER,
	OUTCOMEPOPULATIONID NUMBER,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	AGE NUMBER(5,2)
)
/

create table DATUM
(
	DATUMID NUMBER,
	VALUE VARCHAR(255),
	TRANSMISSIONRECORDID NUMBER
		constraint FK_DATUM_TRANSMISSIONRECORD
			references TRANSMISSIONRECORD
				on delete cascade,
	NOTES VARCHAR(255),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000),
	ELEMENTID NUMBER
		constraint ELEMENT_DATUM
			references ELEMENT
				on delete cascade,
	TRANSMISSIONID NUMBER,
	REPORTINGPERIODID NUMBER,
	STATEID NUMBER
)
/

create unique index PK_DATUM
	on DATUM (DATUMID)
/

create index IDX_DATUM_VALUE
	on DATUM (VALUE)
/

create index IDX_TRANSRECORD_SERVED
	on TRANSMISSIONRECORD (SERVEDPOPULATIONID)
/

create index IDX_TRANSRECORD_OUTCOMEPOP
	on TRANSMISSIONRECORD (OUTCOMEPOPULATIONID)
/

create index IDX_TRANSRECORD_TRANSMISSIONID
	on TRANSMISSIONRECORD (TRANSMISSIONID)
/

create table TRANSMISSIONNOTE
(
	TRANSMISSIONNOTEID NUMBER not null
		constraint PK_TRANSMISSIONNOTE
			primary key
		constraint NN_TRANSMISSIONNOTEID
			check ("TRANSMISSIONNOTEID" IS NOT NULL),
	NOTE VARCHAR(2000),
	TRANSMISSIONID NUMBER
		constraint TRANSMISSION_TRANSMISSIONNOTE
			references TRANSMISSION
				on delete cascade,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	DESCRIPTION VARCHAR(1000)
)
/

create table RECORDTOEXPORT
(
	TRANSMISSIONID NUMBER not null
		constraint TRANSMISSION_RECORDTOEXPORT
			references TRANSMISSION
				on delete cascade
		constraint NN_ETE_TRANSMISSIONID
			check ("TRANSMISSIONID" IS NOT NULL),
	TRANSMISSIONRECORDID NUMBER not null
		constraint NN_ETE_TRANSMISSIONRECORDID
			check ("TRANSMISSIONRECORDID" IS NOT NULL),
	STATEID NUMBER,
	STATE VARCHAR(30),
	TRANSMISSIONTYPE VARCHAR(30),
	REPORTINGPERIODID NUMBER,
	REPORTINGPERIOD VARCHAR(255),
	E1_STATE VARCHAR(4),
	FEDERALFILEID VARCHAR(552),
	E3_RECORD_NUMBER VARCHAR(255),
	RECORD_NOTE VARCHAR(1000),
	E2 VARCHAR(255),
	E3NOTES VARCHAR(255),
	E4 VARCHAR(255),
	E4NOTES VARCHAR(255),
	E5 VARCHAR(255),
	E5NOTES VARCHAR(255),
	E6 VARCHAR(255),
	E6NOTES VARCHAR(255),
	E7 VARCHAR(255),
	E7NOTES VARCHAR(255),
	E8 VARCHAR(255),
	E8NOTES VARCHAR(255),
	E9 VARCHAR(255),
	E9NOTES VARCHAR(255),
	E10 VARCHAR(255),
	E10NOTES VARCHAR(255),
	E11 VARCHAR(255),
	E11NOTES VARCHAR(255),
	E12 VARCHAR(255),
	E12NOTES VARCHAR(255),
	E13 VARCHAR(255),
	E13NOTES VARCHAR(255),
	E14 VARCHAR(255),
	E14NOTES VARCHAR(255),
	E15 VARCHAR(255),
	E15NOTES VARCHAR(255),
	E16 VARCHAR(255),
	E16NOTES VARCHAR(255),
	E17 VARCHAR(255),
	E17NOTES VARCHAR(255),
	E18 VARCHAR(255),
	E18NOTES VARCHAR(255),
	E19 VARCHAR(255),
	E19NOTES VARCHAR(255),
	E20 VARCHAR(255),
	E20NOTES VARCHAR(255),
	E21 VARCHAR(255),
	E21NOTES VARCHAR(255),
	E22 VARCHAR(255),
	E22NOTES VARCHAR(255),
	E23 VARCHAR(255),
	E23NOTES VARCHAR(255),
	E24 VARCHAR(255),
	E24NOTES VARCHAR(255),
	E25 VARCHAR(255),
	E25NOTES VARCHAR(255),
	E26 VARCHAR(255),
	E26NOTES VARCHAR(255),
	E27 VARCHAR(255),
	E27NOTES VARCHAR(255),
	E28 VARCHAR(255),
	E28NOTES VARCHAR(255),
	E29 VARCHAR(255),
	E29NOTES VARCHAR(255),
	E30 VARCHAR(255),
	E30NOTES VARCHAR(255),
	E31 VARCHAR(255),
	E31NOTES VARCHAR(255),
	E32 VARCHAR(255),
	E32NOTES VARCHAR(255),
	E33 VARCHAR(255),
	E33NOTES VARCHAR(255),
	E34 VARCHAR(255),
	E34NOTES VARCHAR(255),
	E35 VARCHAR(255),
	E35NOTES VARCHAR(255),
	E36 VARCHAR(255),
	E36NOTES VARCHAR(255),
	E37 VARCHAR(255),
	E37NOTES VARCHAR(255),
	E38 VARCHAR(255),
	E38NOTES VARCHAR(255),
	E39 VARCHAR(255),
	E39NOTES VARCHAR(255),
	E40 VARCHAR(255),
	E40NOTES VARCHAR(255),
	E41 VARCHAR(255),
	E41NOTES VARCHAR(255),
	E42 VARCHAR(255),
	E42NOTES VARCHAR(255),
	E43 VARCHAR(255),
	E43NOTES VARCHAR(255),
	E44 VARCHAR(255),
	E44NOTES VARCHAR(255),
	E45 VARCHAR(255),
	E45NOTES VARCHAR(255),
	E46 VARCHAR(255),
	E46NOTES VARCHAR(255),
	E47 VARCHAR(255),
	E47NOTES VARCHAR(255),
	E48 VARCHAR(255),
	E48NOTES VARCHAR(255),
	E49 VARCHAR(255),
	E49NOTES VARCHAR(255),
	E50 VARCHAR(255),
	E50NOTES VARCHAR(255),
	E51 VARCHAR(255),
	E51NOTES VARCHAR(255),
	E52 VARCHAR(255),
	E52NOTES VARCHAR(255),
	E53 VARCHAR(255),
	E53NOTES VARCHAR(255),
	E54 VARCHAR(255),
	E54NOTES VARCHAR(255),
	E55 VARCHAR(255),
	E55NOTES VARCHAR(255),
	E56 VARCHAR(255),
	E56NOTES VARCHAR(255),
	E57 VARCHAR(255),
	E57NOTES VARCHAR(255),
	E58 VARCHAR(255),
	E58NOTES VARCHAR(255),
	SERVEDPOPULATION VARCHAR(30),
	OUTCOMEPOPULATION VARCHAR(30),
	CREATEDDATE DATE default sysdate,
	FLAGE37E58BASELINEICC NUMBER,
	INCOHORT NUMBER(2) default 0,
	INSAMPLE NUMBER(2) default 0,
	COHORTID NUMBER(3) default 0,
	constraint PK_RECORDTOEXPORT
		primary key (TRANSMISSIONID, TRANSMISSIONRECORDID)
)
/

create index IDX_RECORDTOEXPORT_IDS
	on RECORDTOEXPORT (STATEID, REPORTINGPERIODID)
/

create index IDX_RECORDTOEXPORT_STATEID
	on RECORDTOEXPORT (STATEID)
/

create index IDX_RECORDTOEXPORT_RPID
	on RECORDTOEXPORT (REPORTINGPERIODID)
/

create index IDX_RECORDTOEXPORT_STATE
	on RECORDTOEXPORT (STATE)
/

create index IDX_RECORDTOEXPORT_RP
	on RECORDTOEXPORT (REPORTINGPERIOD)
/

create index IDX_RECORDTOEXPORT_COHORTID
	on RECORDTOEXPORT (COHORTID)
/

create index IDX_RECORDTOEXPORT_OUTCOMPOP
	on RECORDTOEXPORT (OUTCOMEPOPULATION)
/

create index IDX_RECORDTOEXPORT_SERVEDPOP
	on RECORDTOEXPORT (SERVEDPOPULATION)
/

create table DATAQUALITYADVISORY
(
	DATAQUALITYADVID NUMBER not null
		constraint PK_DATAQUALITYADVISORY
			primary key,
	ELEMENTLEVELDQASTDID NUMBER
		constraint ELEMENTLEV_DATAQUALITYADV
			references ELEMENTLEVELDQASTANDARD,
	PROBLEMDESCRIPTIONID NUMBER,
	TRANSMISSIONID NUMBER
		constraint TRANSMISSION_DATAQUALITYADV
			references TRANSMISSION
				on delete cascade,
	DATUMID NUMBER,
	REFDATUMID NUMBER,
	ELEMENTLEVELDATUMVALUE VARCHAR(255),
	COUNTVALUE NUMBER,
	PERCENTVALUE NUMBER,
	ADVISORYTYPE VARCHAR(255),
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255)
)
/

create index IDX_DATAQUALITYADV_TRANS
	on DATAQUALITYADVISORY (TRANSMISSIONID)
/

create or replace trigger TGR_MARKSAMPLEINRE
	after update of SAMPLED
	on COHORTRECORDS
	for each row
Begin

  update recordtoexport set insample = 1
  where
    reportingperiod = :OLD.REPORTINGPERIODNAME and
    e3_record_number = :OLD.RECORDNUMBER
 ;

End;
/

create table CREATE$JAVA$LOB$TABLE
(
	NAME VARCHAR(700)
		unique,
	LOB BLOB,
	LOADTIME DATE
)
/

create table SAMPLINGREQUESTS
(
	SAMPLINGREQUESTID NUMBER not null
		constraint PK_SAMPLINGREQUESTS
			primary key,
	COHORTSTATUSID NUMBER
		constraint FK_COHSTATS_SAMPLINGREQUESTS
			references COHORTSTATUS,
	SAMPLINGMETHOD VARCHAR(3999) default 'SRS',
	SAMPLINGREQUESTSTATUSID NUMBER
		constraint FK_LKUP_SAMPREQ_SAMPREQSTATID
			references LOOKUP,
	IMPORTSTATUSID NUMBER
		constraint FK_LOOKUP_SAMPLREQ_IMPRTSTATID
			references LOOKUP,
	IMPORTSUMMARY VARCHAR(3999),
	LASTSAMPLINGSTATUSDATE DATE,
	CREATEDDATE DATE,
	IMPORTSUMMARYCLOB CLOB
)
/

create table SAMPLINGREQUESTHISTORY
(
	SAMPLINGSTATUSID NUMBER not null
		constraint PK_SAMPLINGREQUESTHISTORY
			primary key,
	SAMPLINGREQUESTID NUMBER
		constraint FK_SAMPREQ_SAMPLREQHIST
			references SAMPLINGREQUESTS,
	REQUESTSTATUSID NUMBER
		constraint FK_LOOKUP_SAMPLINGREQHISTORY
			references LOOKUP,
	CREATEDDATE DATE,
	MESSAGEID NUMBER
		constraint FK_MES_SAMPREQHIST
			references MESSAGE,
	LASTSAMPLINGMETHOD VARCHAR(3999)
)
/

create global temporary table TEMP_SAMPLINGRECORDS
(
	ID NUMBER not null
		constraint ID_PK
			primary key,
	SAMPLINGREQUESTID NUMBER,
	RECORDNUMBER VARCHAR(255)
)
on commit preserve rows
/

create global temporary table HT_OUTCOMEPOPULATION
(
	POPULATIONID NUMBER(19) not null
)
on commit delete rows
/

create global temporary table HT_POPULATION
(
	POPULATIONID NUMBER(19) not null
)
on commit delete rows
/

create global temporary table HT_SERVEDPOPULATION
(
	POPULATIONID NUMBER(19) not null
)
on commit delete rows
/

create table TRANSMISSIONDELETELOG
(
	TRANSMISSIONID NUMBER not null
		constraint PK_TRANSMISSIONID
			primary key,
	TRANSMISSIONTYPEID NUMBER
		constraint FK_TRANSDELETELOG_TRANSTYPE
			references TRANSMISSIONTYPE,
	REPORTINGPERIODID NUMBER
		constraint FK_TRANSDELETELOG_REPORTPERIOD
			references REPORTINGPERIOD,
	DELETEDDATE DATE,
	DELETEDBY VARCHAR(255),
	FILENAME VARCHAR(255),
	FILESIZE NUMBER,
	FILERECEIVEDDATE DATE,
	STATEID NUMBER
		constraint FK_TRANSDELETELOG_STATE
			references STATE,
	SITEUSERID NUMBER
		constraint FK_TRANSDELETELOG_SITEUSER
			references SITEUSER,
	COMPLIANCESTATUS VARCHAR(255),
	RECORDCOUNT NUMBER,
	DESCRIPTION VARCHAR(1000)
)
/

create table EXTENDEDDUEDATE
(
	EXTENDEDDUEDATEID NUMBER not null
		constraint PK_EXTENDEDDUEDATE
			primary key
		constraint NN_EXTENDEDDUEDATEID
			check ("EXTENDEDDUEDATEID" IS NOT NULL),
	STATEID NUMBER,
	DUEDATEID NUMBER
		constraint DUEDATE_EXTENDEDDUEDATE
			references DUEDATE,
	EXTENDEDDUEDATE DATE,
	CREATEDDATE DATE,
	CREATEDBY VARCHAR(255),
	UPDATEDATE DATE,
	UPDATEBY VARCHAR(255),
	REASON VARCHAR(4000),
	DELETEFLAG CHAR default 0 not null
)
/

create table GENERATELETTERLOG
(
	DATETIMESTAMP TIMESTAMP(6),
	COMPLIANCESTATUS VARCHAR(255),
	SITEUSERID NUMBER
		constraint FK_GENLETTERLOG_SITEUSER
			references SITEUSER,
	STATEID NUMBER
		constraint FK_GENLETTERLOG_STATE
			references STATE,
	REPORTINGPERIODID NUMBER
		constraint FK_GENLETTERLOG_REPORTPERIOD
			references REPORTINGPERIOD,
	TRANSMISSIONTYPEID NUMBER
		constraint FK_GENLETTERLOG_TRANSTYPE
			references TRANSMISSIONTYPE,
	TRANSMISSIONID NUMBER,
	GENERATELETTERLOGID NUMBER not null
		constraint PK_GENERATELETTERLOGID
			primary key
)
/

create table PENALTYLETTERSMETADATA
(
	STATUS VARCHAR(50),
	USERNAME VARCHAR(255),
	TRANSMISSIONIDS VARCHAR(4000),
	DESCRIPTION VARCHAR(1000),
	UPDATEBY VARCHAR(255),
	UPDATEDATE DATE,
	CREATEDBY VARCHAR(255),
	CREATEDDATE DATE,
	STATES VARCHAR(2000),
	REPORTINGPERIODS VARCHAR(2000),
	FILENAME VARCHAR(255),
	PENALTYLETTERSMETADATAID NUMBER not null
		constraint PK_PENALTYLETTERSMETADATA
			primary key
)
/

create table EXTENDEDDUEDATEHISTORY
(
	OPERATIONEXECUTED VARCHAR(30),
	EXTENDEDDUEDATEDELETEFLAG_NEW CHAR,
	EXTENDEDDUEDATEDELETEFLAG_OLD CHAR,
	EXTENDEDDUEDATEREASON_NEW VARCHAR(4000),
	EXTENDEDDUEDATEREASON_OLD VARCHAR(4000),
	EXTENDEDDUEDATEUPDATEBY_NEW VARCHAR(255),
	EXTENDEDDUEDATEUPDATEBY_OLD VARCHAR(255),
	EXTENDEDDUEDATEUPDATEDATE_NEW DATE,
	EXTENDEDDUEDATEUPDATEDATE_OLD DATE,
	EXTENDEDDUEDATECREATEBY VARCHAR(255),
	EXTENDEDDUEDATECREATEDATE DATE,
	DUEDATEID NUMBER
		constraint FK_EXTENDDUEDATEHISTRY_DUEDATE
			references DUEDATE,
	EXTENDEDDUEDATESTATEID NUMBER,
	EXTENDEDDUEDATE_NEW DATE,
	EXTENDEDDUEDATE_OLD DATE,
	EXTENDEDDUEDATEID NUMBER,
	HISTORYCREATEDBY VARCHAR(255),
	HISTORYCREATEDATE DATE,
	EXTENDEDDUEDATEHISTORYID NUMBER not null
		constraint PK_EXTENDEDDUEDATEHISTORYID
			primary key
)
/

create or replace trigger EXTENDEDDUEDATEHISTORY_AUDIT
	before insert or update or delete
	on EXTENDEDDUEDATE
	for each row
DECLARE
	  v_user VARCHAR(50);
	  v_date date;
	BEGIN
	SELECT USER, SYSDATE INTO v_user, v_date  FROM DUAL;
	IF INSERTING THEN
		 INSERT INTO EXTENDEDDUEDATEHISTORY (EXTENDEDDUEDATEHISTORYID,HISTORYCREATEDATE,HISTORYCREATEDBY, EXTENDEDDUEDATEID,EXTENDEDDUEDATE_OLD,EXTENDEDDUEDATE_NEW,EXTENDEDDUEDATESTATEID,DUEDATEID,EXTENDEDDUEDATECREATEDATE,
		 EXTENDEDDUEDATECREATEBY, EXTENDEDDUEDATEUPDATEDATE_OLD, EXTENDEDDUEDATEUPDATEDATE_NEW,EXTENDEDDUEDATEUPDATEBY_OLD,EXTENDEDDUEDATEUPDATEBY_NEW,EXTENDEDDUEDATEREASON_OLD,EXTENDEDDUEDATEREASON_NEW,
		 EXTENDEDDUEDATEDELETEFLAG_OLD,EXTENDEDDUEDATEDELETEFLAG_NEW, OPERATIONEXECUTED) VALUES(SEQ_EXTENDEDDUEDATEHISTORY.NEXTVAL,v_date, v_user,:NEW.EXTENDEDDUEDATEID,null,:NEW.EXTENDEDDUEDATE,:NEW.STATEID, :NEW.DUEDATEID,
		 :NEW.CREATEDDATE,:NEW.CREATEDBY,null,:NEW.UPDATEDATE,'',:NEW.UPDATEBY,'',:NEW.REASON, '',:NEW.DELETEFLAG,'INSERT');
	ELSIF DELETING THEN
		  INSERT INTO EXTENDEDDUEDATEHISTORY (EXTENDEDDUEDATEHISTORYID,HISTORYCREATEDATE,HISTORYCREATEDBY, EXTENDEDDUEDATEID,EXTENDEDDUEDATE_OLD,EXTENDEDDUEDATE_NEW,EXTENDEDDUEDATESTATEID,DUEDATEID,EXTENDEDDUEDATECREATEDATE,
		 EXTENDEDDUEDATECREATEBY, EXTENDEDDUEDATEUPDATEDATE_OLD, EXTENDEDDUEDATEUPDATEDATE_NEW,EXTENDEDDUEDATEUPDATEBY_OLD,EXTENDEDDUEDATEUPDATEBY_NEW,EXTENDEDDUEDATEREASON_OLD,EXTENDEDDUEDATEREASON_NEW,
		 EXTENDEDDUEDATEDELETEFLAG_OLD,EXTENDEDDUEDATEDELETEFLAG_NEW, OPERATIONEXECUTED) VALUES(SEQ_EXTENDEDDUEDATEHISTORY.NEXTVAL,v_date, v_user,:OLD.EXTENDEDDUEDATEID,:OLD.EXTENDEDDUEDATE,:NEW.EXTENDEDDUEDATE,:OLD.STATEID,:OLD.DUEDATEID,
		 :OLD.CREATEDDATE,:OLD.CREATEDBY,:OLD.UPDATEDATE,null,:OLD.UPDATEBY,'',:OLD.REASON,'',:OLD.DELETEFLAG,:NEW.DELETEFLAG,'DELETE');
	ELSIF UPDATING THEN
		IF (:NEW.DELETEFLAG = 0) THEN
			 INSERT INTO EXTENDEDDUEDATEHISTORY (EXTENDEDDUEDATEHISTORYID,HISTORYCREATEDATE,HISTORYCREATEDBY, EXTENDEDDUEDATEID,EXTENDEDDUEDATE_OLD,EXTENDEDDUEDATE_NEW,EXTENDEDDUEDATESTATEID,DUEDATEID,EXTENDEDDUEDATECREATEDATE,
			 EXTENDEDDUEDATECREATEBY, EXTENDEDDUEDATEUPDATEDATE_OLD, EXTENDEDDUEDATEUPDATEDATE_NEW,EXTENDEDDUEDATEUPDATEBY_OLD,EXTENDEDDUEDATEUPDATEBY_NEW,EXTENDEDDUEDATEREASON_OLD,EXTENDEDDUEDATEREASON_NEW,
			 EXTENDEDDUEDATEDELETEFLAG_OLD,EXTENDEDDUEDATEDELETEFLAG_NEW, OPERATIONEXECUTED) VALUES(SEQ_EXTENDEDDUEDATEHISTORY.NEXTVAL,v_date, v_user,:OLD.EXTENDEDDUEDATEID,:OLD.EXTENDEDDUEDATE,:NEW.EXTENDEDDUEDATE,:OLD.STATEID,:OLD.DUEDATEID,
			 :OLD.CREATEDDATE,:OLD.CREATEDBY,:OLD.UPDATEDATE,:NEW.UPDATEDATE,:OLD.UPDATEBY,:NEW.UPDATEBY,:OLD.REASON,:NEW.REASON,:OLD.DELETEFLAG,:NEW.DELETEFLAG,'UPDATE');
		ELSE
			 INSERT INTO EXTENDEDDUEDATEHISTORY (EXTENDEDDUEDATEHISTORYID,HISTORYCREATEDATE,HISTORYCREATEDBY, EXTENDEDDUEDATEID,EXTENDEDDUEDATE_OLD,EXTENDEDDUEDATE_NEW,EXTENDEDDUEDATESTATEID,DUEDATEID,EXTENDEDDUEDATECREATEDATE,
		 EXTENDEDDUEDATECREATEBY, EXTENDEDDUEDATEUPDATEDATE_OLD, EXTENDEDDUEDATEUPDATEDATE_NEW,EXTENDEDDUEDATEUPDATEBY_OLD,EXTENDEDDUEDATEUPDATEBY_NEW,EXTENDEDDUEDATEREASON_OLD,EXTENDEDDUEDATEREASON_NEW,
		 EXTENDEDDUEDATEDELETEFLAG_OLD,EXTENDEDDUEDATEDELETEFLAG_NEW, OPERATIONEXECUTED) VALUES(SEQ_EXTENDEDDUEDATEHISTORY.NEXTVAL,v_date, v_user,:OLD.EXTENDEDDUEDATEID,:OLD.EXTENDEDDUEDATE,:NEW.EXTENDEDDUEDATE,:OLD.STATEID,:OLD.DUEDATEID,
		 :OLD.CREATEDDATE,:OLD.CREATEDBY,:OLD.UPDATEDATE,null,:OLD.UPDATEBY,'',:OLD.REASON,'',:OLD.DELETEFLAG,:NEW.DELETEFLAG,'DELETE');
		END IF;
	END IF;
	EXCEPTION
	WHEN OTHERS THEN
	   raise_application_error(-20001,'An error was encountered - '||SQLCODE||' - ERROR- '||SQLERRM);
	END;
/

