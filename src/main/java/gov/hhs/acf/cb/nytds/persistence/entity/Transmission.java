package gov.hhs.acf.cb.nytds.persistence.entity;

// Generated May 20, 2009 10:16:43 AM by Hibernate Tools 3.2.4.GA

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;

/*
 * Transmission generated by hbm2java
 */
@Entity
public class Transmission extends BaseEntity {
    @Getter
    @Setter
    @ManyToOne
    private TransmissionType transmissionType;
    @Getter
    @Setter
    @ManyToOne
    private ReportingPeriod reportingPeriod;
    @Getter
    @Setter
    private String name;
    @Getter
    @Setter
    private String fileGenerationDate;
    @Getter
    @Setter
    private String fileId;
    @Getter
    @Setter
    private String complianceStatus;
    @Getter
    @Setter
    private String processingStatus;
    @Getter
    @Setter
    private String submissionStatus;
    @Getter
    @Setter
    private Calendar submittedDate;
    @Getter
    @Setter
    @ManyToOne
    private SiteUser siteUser;
    @Getter
    @Setter
    private String fileName;
    @Getter
    @Setter
    private Integer fileSize;
    @Getter
    @Setter
    private Calendar fileReceivedDate;
    @Getter
    @Setter
    @ManyToOne
    private State state;
    @Getter
    @Setter
    private String dataFileReportPeriodValue;
    @Getter
    @Setter
    private String dataFileStateValue; // Transmission Category value in data file
    @Getter
    @Setter
    private String dataFileTransmissionTypeValue;
    @Getter
    @Setter
    private String lateWarningMessage;
    @Getter
    @Setter
    private BigDecimal potentialPenalty;
    @Getter
    @Setter
    private Long improperFormattedValCnt;
    @Getter
    @Setter
    private Long duplicateRecordsCnt;
    @Getter
    @Setter
    private Long formatErrCnt;
    @Getter
    @Setter
    private Long recordsCnt;
    @Getter
    @Setter
    @OneToMany
    private Set<NonCompliance> nonCompliances = new HashSet<>(0);
    @Getter
    @Setter
    @OneToMany
    private Set<TransmissionNote> transmissionNotes = new HashSet<>(0);
    @Getter
    @Setter
    @OneToMany
    private Set<ElementNote> elementNotes = new HashSet<>(0);
    @Getter
    @Setter
    @OneToMany
    private Set<TransmissionRecord> transmissionRecords = new HashSet<>(0);
    @Getter
    @Setter
    @OneToMany
    private Set<DataAggregate> dataAggregates = new HashSet<>(0);

    public Transmission() {
    }

    public Transmission(Long transmissionId) {
        this.id = transmissionId;
    }

    public Transmission(Long transmissionId, TransmissionType transmissionType, ReportingPeriod reportingPeriod,
                        String name, Calendar createdDate, String createdBy, Calendar updateDate, String updateBy, String description,
                        Set<NonCompliance> nonCompliances, String submissionStatus, Calendar submittedDate, SiteUser siteUser,
                        String fileName, Integer fileSize, Calendar fileReceivedDate, State state) {
        this.id = transmissionId;
        this.transmissionType = transmissionType;
        this.reportingPeriod = reportingPeriod;
        this.name = name;
        this.createdDate = createdDate;
        this.createdBy = createdBy;
        this.updateDate = updateDate;
        this.updateBy = updateBy;
        this.description = description;
        this.nonCompliances = nonCompliances;
        this.submissionStatus = submissionStatus;
        this.submittedDate = submittedDate;
        this.siteUser = siteUser;
        this.fileName = fileName;
        this.fileSize = fileSize;
        this.fileReceivedDate = fileReceivedDate;
        this.state = state;

    }


    /**
     * Informs caller of any transmission errors in the current transmission.
     *
     * @return
     */
    public boolean hasNoErrorsInTransmission() {

        return (getImproperFormattedValCnt() == null || (getImproperFormattedValCnt() != null
                && getImproperFormattedValCnt() == 0))
                && (getFormatErrCnt() == null || (getFormatErrCnt() != null
                && getFormatErrCnt() == 0));
    }

    /**
     * Checks duplicate records have been counted.
     *
     * @return
     */
    public boolean hasDuplicateRecords() {
        return (getDuplicateRecordsCnt() != null && getDuplicateRecordsCnt() > 0)
                && (getImproperFormattedValCnt() == null || (getImproperFormattedValCnt() != null
                && getImproperFormattedValCnt() == 0));
    }

    /**
     * Checks if any file format errors have been counted.
     *
     * @return
     */
    public boolean hasFileFormatErrors() {
        return (getDuplicateRecordsCnt() != null && getDuplicateRecordsCnt() > 0)
                && (getImproperFormattedValCnt() != null && getImproperFormattedValCnt() > 0);
    }
}
